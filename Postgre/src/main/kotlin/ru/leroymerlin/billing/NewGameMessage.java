/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ru.leroymerlin.billing;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** New game start message */
@org.apache.avro.specific.AvroGenerated
public class NewGameMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 1581993734284116443L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NewGameMessage\",\"namespace\":\"ru.leroymerlin.billing\",\"doc\":\"New game start message\",\"fields\":[{\"name\":\"firstPlayer\",\"type\":{\"type\":\"record\",\"name\":\"Player\",\"doc\":\"Player object\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name\",\"default\":\"null\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"Age\",\"default\":-1}]},\"doc\":\"Player one\"},{\"name\":\"secondPlayer\",\"type\":\"Player\",\"doc\":\"Player two\"},{\"name\":\"point\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\",\"default\":\"11\"},\"doc\":\"max game points\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<NewGameMessage> ENCODER =
            new BinaryMessageEncoder<NewGameMessage>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<NewGameMessage> DECODER =
            new BinaryMessageDecoder<NewGameMessage>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<NewGameMessage> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<NewGameMessage> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<NewGameMessage>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this NewGameMessage to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a NewGameMessage from a ByteBuffer. */
    public static NewGameMessage fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Player one */
    @Deprecated
    public ru.leroymerlin.billing.Player firstPlayer;
    /** Player two */
    @Deprecated
    public ru.leroymerlin.billing.Player secondPlayer;
    /** max game points */
    @Deprecated
    public java.math.BigDecimal point;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public NewGameMessage() {
    }

    /**
     * All-args constructor.
     * @param firstPlayer Player one
     * @param secondPlayer Player two
     * @param point max game points
     */
    public NewGameMessage(ru.leroymerlin.billing.Player firstPlayer, ru.leroymerlin.billing.Player secondPlayer, java.math.BigDecimal point) {
        this.firstPlayer = firstPlayer;
        this.secondPlayer = secondPlayer;
        this.point = point;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return firstPlayer;
            case 1:
                return secondPlayer;
            case 2:
                return point;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                firstPlayer = (ru.leroymerlin.billing.Player) value$;
                break;
            case 1:
                secondPlayer = (ru.leroymerlin.billing.Player) value$;
                break;
            case 2:
                point = (java.math.BigDecimal) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'firstPlayer' field.
     * @return Player one
     */
    public ru.leroymerlin.billing.Player getFirstPlayer() {
        return firstPlayer;
    }

    /**
     * Sets the value of the 'firstPlayer' field.
     * Player one
     * @param value the value to set.
     */
    public void setFirstPlayer(ru.leroymerlin.billing.Player value) {
        this.firstPlayer = value;
    }

    /**
     * Gets the value of the 'secondPlayer' field.
     * @return Player two
     */
    public ru.leroymerlin.billing.Player getSecondPlayer() {
        return secondPlayer;
    }

    /**
     * Sets the value of the 'secondPlayer' field.
     * Player two
     * @param value the value to set.
     */
    public void setSecondPlayer(ru.leroymerlin.billing.Player value) {
        this.secondPlayer = value;
    }

    /**
     * Gets the value of the 'point' field.
     * @return max game points
     */
    public java.math.BigDecimal getPoint() {
        return point;
    }

    /**
     * Sets the value of the 'point' field.
     * max game points
     * @param value the value to set.
     */
    public void setPoint(java.math.BigDecimal value) {
        this.point = value;
    }

    /**
     * Creates a new NewGameMessage RecordBuilder.
     * @return A new NewGameMessage RecordBuilder
     */
    public static ru.leroymerlin.billing.NewGameMessage.Builder newBuilder() {
        return new ru.leroymerlin.billing.NewGameMessage.Builder();
    }

    /**
     * Creates a new NewGameMessage RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new NewGameMessage RecordBuilder
     */
    public static ru.leroymerlin.billing.NewGameMessage.Builder newBuilder(ru.leroymerlin.billing.NewGameMessage.Builder other) {
        return new ru.leroymerlin.billing.NewGameMessage.Builder(other);
    }

    /**
     * Creates a new NewGameMessage RecordBuilder by copying an existing NewGameMessage instance.
     * @param other The existing instance to copy.
     * @return A new NewGameMessage RecordBuilder
     */
    public static ru.leroymerlin.billing.NewGameMessage.Builder newBuilder(ru.leroymerlin.billing.NewGameMessage other) {
        return new ru.leroymerlin.billing.NewGameMessage.Builder(other);
    }

    /**
     * RecordBuilder for NewGameMessage instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NewGameMessage>
            implements org.apache.avro.data.RecordBuilder<NewGameMessage> {

        /** Player one */
        private ru.leroymerlin.billing.Player firstPlayer;
        private ru.leroymerlin.billing.Player.Builder firstPlayerBuilder;
        /** Player two */
        private ru.leroymerlin.billing.Player secondPlayer;
        private ru.leroymerlin.billing.Player.Builder secondPlayerBuilder;
        /** max game points */
        private java.math.BigDecimal point;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(ru.leroymerlin.billing.NewGameMessage.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.firstPlayer)) {
                this.firstPlayer = data().deepCopy(fields()[0].schema(), other.firstPlayer);
                fieldSetFlags()[0] = true;
            }
            if (other.hasFirstPlayerBuilder()) {
                this.firstPlayerBuilder = ru.leroymerlin.billing.Player.newBuilder(other.getFirstPlayerBuilder());
            }
            if (isValidValue(fields()[1], other.secondPlayer)) {
                this.secondPlayer = data().deepCopy(fields()[1].schema(), other.secondPlayer);
                fieldSetFlags()[1] = true;
            }
            if (other.hasSecondPlayerBuilder()) {
                this.secondPlayerBuilder = ru.leroymerlin.billing.Player.newBuilder(other.getSecondPlayerBuilder());
            }
            if (isValidValue(fields()[2], other.point)) {
                this.point = data().deepCopy(fields()[2].schema(), other.point);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing NewGameMessage instance
         * @param other The existing instance to copy.
         */
        private Builder(ru.leroymerlin.billing.NewGameMessage other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.firstPlayer)) {
                this.firstPlayer = data().deepCopy(fields()[0].schema(), other.firstPlayer);
                fieldSetFlags()[0] = true;
            }
            this.firstPlayerBuilder = null;
            if (isValidValue(fields()[1], other.secondPlayer)) {
                this.secondPlayer = data().deepCopy(fields()[1].schema(), other.secondPlayer);
                fieldSetFlags()[1] = true;
            }
            this.secondPlayerBuilder = null;
            if (isValidValue(fields()[2], other.point)) {
                this.point = data().deepCopy(fields()[2].schema(), other.point);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'firstPlayer' field.
         * Player one
         * @return The value.
         */
        public ru.leroymerlin.billing.Player getFirstPlayer() {
            return firstPlayer;
        }

        /**
         * Sets the value of the 'firstPlayer' field.
         * Player one
         * @param value The value of 'firstPlayer'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder setFirstPlayer(ru.leroymerlin.billing.Player value) {
            validate(fields()[0], value);
            this.firstPlayerBuilder = null;
            this.firstPlayer = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'firstPlayer' field has been set.
         * Player one
         * @return True if the 'firstPlayer' field has been set, false otherwise.
         */
        public boolean hasFirstPlayer() {
            return fieldSetFlags()[0];
        }

        /**
         * Gets the Builder instance for the 'firstPlayer' field and creates one if it doesn't exist yet.
         * Player one
         * @return This builder.
         */
        public ru.leroymerlin.billing.Player.Builder getFirstPlayerBuilder() {
            if (firstPlayerBuilder == null) {
                if (hasFirstPlayer()) {
                    setFirstPlayerBuilder(ru.leroymerlin.billing.Player.newBuilder(firstPlayer));
                } else {
                    setFirstPlayerBuilder(ru.leroymerlin.billing.Player.newBuilder());
                }
            }
            return firstPlayerBuilder;
        }

        /**
         * Sets the Builder instance for the 'firstPlayer' field
         * Player one
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder setFirstPlayerBuilder(ru.leroymerlin.billing.Player.Builder value) {
            clearFirstPlayer();
            firstPlayerBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'firstPlayer' field has an active Builder instance
         * Player one
         * @return True if the 'firstPlayer' field has an active Builder instance
         */
        public boolean hasFirstPlayerBuilder() {
            return firstPlayerBuilder != null;
        }

        /**
         * Clears the value of the 'firstPlayer' field.
         * Player one
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder clearFirstPlayer() {
            firstPlayer = null;
            firstPlayerBuilder = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'secondPlayer' field.
         * Player two
         * @return The value.
         */
        public ru.leroymerlin.billing.Player getSecondPlayer() {
            return secondPlayer;
        }

        /**
         * Sets the value of the 'secondPlayer' field.
         * Player two
         * @param value The value of 'secondPlayer'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder setSecondPlayer(ru.leroymerlin.billing.Player value) {
            validate(fields()[1], value);
            this.secondPlayerBuilder = null;
            this.secondPlayer = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'secondPlayer' field has been set.
         * Player two
         * @return True if the 'secondPlayer' field has been set, false otherwise.
         */
        public boolean hasSecondPlayer() {
            return fieldSetFlags()[1];
        }

        /**
         * Gets the Builder instance for the 'secondPlayer' field and creates one if it doesn't exist yet.
         * Player two
         * @return This builder.
         */
        public ru.leroymerlin.billing.Player.Builder getSecondPlayerBuilder() {
            if (secondPlayerBuilder == null) {
                if (hasSecondPlayer()) {
                    setSecondPlayerBuilder(ru.leroymerlin.billing.Player.newBuilder(secondPlayer));
                } else {
                    setSecondPlayerBuilder(ru.leroymerlin.billing.Player.newBuilder());
                }
            }
            return secondPlayerBuilder;
        }

        /**
         * Sets the Builder instance for the 'secondPlayer' field
         * Player two
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder setSecondPlayerBuilder(ru.leroymerlin.billing.Player.Builder value) {
            clearSecondPlayer();
            secondPlayerBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'secondPlayer' field has an active Builder instance
         * Player two
         * @return True if the 'secondPlayer' field has an active Builder instance
         */
        public boolean hasSecondPlayerBuilder() {
            return secondPlayerBuilder != null;
        }

        /**
         * Clears the value of the 'secondPlayer' field.
         * Player two
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder clearSecondPlayer() {
            secondPlayer = null;
            secondPlayerBuilder = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'point' field.
         * max game points
         * @return The value.
         */
        public java.math.BigDecimal getPoint() {
            return point;
        }

        /**
         * Sets the value of the 'point' field.
         * max game points
         * @param value The value of 'point'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder setPoint(java.math.BigDecimal value) {
            validate(fields()[2], value);
            this.point = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'point' field has been set.
         * max game points
         * @return True if the 'point' field has been set, false otherwise.
         */
        public boolean hasPoint() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'point' field.
         * max game points
         * @return This builder.
         */
        public ru.leroymerlin.billing.NewGameMessage.Builder clearPoint() {
            point = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public NewGameMessage build() {
            try {
                NewGameMessage record = new NewGameMessage();
                if (firstPlayerBuilder != null) {
                    record.firstPlayer = this.firstPlayerBuilder.build();
                } else {
                    record.firstPlayer = fieldSetFlags()[0] ? this.firstPlayer : (ru.leroymerlin.billing.Player) defaultValue(fields()[0]);
                }
                if (secondPlayerBuilder != null) {
                    record.secondPlayer = this.secondPlayerBuilder.build();
                } else {
                    record.secondPlayer = fieldSetFlags()[1] ? this.secondPlayer : (ru.leroymerlin.billing.Player) defaultValue(fields()[1]);
                }
                record.point = fieldSetFlags()[2] ? this.point : (java.math.BigDecimal) defaultValue(fields()[2]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<NewGameMessage>
            WRITER$ = (org.apache.avro.io.DatumWriter<NewGameMessage>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<NewGameMessage>
            READER$ = (org.apache.avro.io.DatumReader<NewGameMessage>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
