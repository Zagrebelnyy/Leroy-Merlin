/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ru.leroymerlin.billing;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** Game result */
@org.apache.avro.specific.AvroGenerated
public class GameResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6143756307669138086L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GameResult\",\"namespace\":\"ru.leroymerlin.billing\",\"doc\":\"Game result\",\"fields\":[{\"name\":\"firstPlayer\",\"type\":\"string\",\"doc\":\"Winner player name\"},{\"name\":\"gameTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-micros\"},\"doc\":\"Game datetime in UTC\"},{\"name\":\"score\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"doc\":\"Final score\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMicrosConversion());
    }

    private static final BinaryMessageEncoder<GameResult> ENCODER =
            new BinaryMessageEncoder<GameResult>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<GameResult> DECODER =
            new BinaryMessageDecoder<GameResult>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<GameResult> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<GameResult> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<GameResult> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<GameResult>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this GameResult to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a GameResult from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a GameResult instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static GameResult fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Winner player name */
    private java.lang.CharSequence firstPlayer;
    /** Game datetime in UTC */
    private java.time.Instant gameTime;
    /** Final score */
    private java.math.BigDecimal score;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public GameResult() {
    }

    /**
     * All-args constructor.
     * @param firstPlayer Winner player name
     * @param gameTime Game datetime in UTC
     * @param score Final score
     */
    public GameResult(java.lang.CharSequence firstPlayer, java.time.Instant gameTime, java.math.BigDecimal score) {
        this.firstPlayer = firstPlayer;
        this.gameTime = gameTime.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
        this.score = score;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return firstPlayer;
            case 1:
                return gameTime;
            case 2:
                return score;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    null,
                    new org.apache.avro.data.TimeConversions.TimestampMicrosConversion(),
                    null,
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                firstPlayer = (java.lang.CharSequence) value$;
                break;
            case 1:
                gameTime = (java.time.Instant) value$;
                break;
            case 2:
                score = (java.math.BigDecimal) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'firstPlayer' field.
     * @return Winner player name
     */
    public java.lang.CharSequence getFirstPlayer() {
        return firstPlayer;
    }


    /**
     * Sets the value of the 'firstPlayer' field.
     * Winner player name
     * @param value the value to set.
     */
    public void setFirstPlayer(java.lang.CharSequence value) {
        this.firstPlayer = value;
    }

    /**
     * Gets the value of the 'gameTime' field.
     * @return Game datetime in UTC
     */
    public java.time.Instant getGameTime() {
        return gameTime;
    }


    /**
     * Sets the value of the 'gameTime' field.
     * Game datetime in UTC
     * @param value the value to set.
     */
    public void setGameTime(java.time.Instant value) {
        this.gameTime = value.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
    }

    /**
     * Gets the value of the 'score' field.
     * @return Final score
     */
    public java.math.BigDecimal getScore() {
        return score;
    }


    /**
     * Sets the value of the 'score' field.
     * Final score
     * @param value the value to set.
     */
    public void setScore(java.math.BigDecimal value) {
        this.score = value;
    }

    /**
     * Creates a new GameResult RecordBuilder.
     * @return A new GameResult RecordBuilder
     */
    public static ru.leroymerlin.billing.GameResult.Builder newBuilder() {
        return new ru.leroymerlin.billing.GameResult.Builder();
    }

    /**
     * Creates a new GameResult RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new GameResult RecordBuilder
     */
    public static ru.leroymerlin.billing.GameResult.Builder newBuilder(ru.leroymerlin.billing.GameResult.Builder other) {
        if (other == null) {
            return new ru.leroymerlin.billing.GameResult.Builder();
        } else {
            return new ru.leroymerlin.billing.GameResult.Builder(other);
        }
    }

    /**
     * Creates a new GameResult RecordBuilder by copying an existing GameResult instance.
     * @param other The existing instance to copy.
     * @return A new GameResult RecordBuilder
     */
    public static ru.leroymerlin.billing.GameResult.Builder newBuilder(ru.leroymerlin.billing.GameResult other) {
        if (other == null) {
            return new ru.leroymerlin.billing.GameResult.Builder();
        } else {
            return new ru.leroymerlin.billing.GameResult.Builder(other);
        }
    }

    /**
     * RecordBuilder for GameResult instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GameResult>
            implements org.apache.avro.data.RecordBuilder<GameResult> {

        /** Winner player name */
        private java.lang.CharSequence firstPlayer;
        /** Game datetime in UTC */
        private java.time.Instant gameTime;
        /** Final score */
        private java.math.BigDecimal score;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(ru.leroymerlin.billing.GameResult.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.firstPlayer)) {
                this.firstPlayer = data().deepCopy(fields()[0].schema(), other.firstPlayer);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.gameTime)) {
                this.gameTime = data().deepCopy(fields()[1].schema(), other.gameTime);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.score)) {
                this.score = data().deepCopy(fields()[2].schema(), other.score);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing GameResult instance
         * @param other The existing instance to copy.
         */
        private Builder(ru.leroymerlin.billing.GameResult other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.firstPlayer)) {
                this.firstPlayer = data().deepCopy(fields()[0].schema(), other.firstPlayer);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.gameTime)) {
                this.gameTime = data().deepCopy(fields()[1].schema(), other.gameTime);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.score)) {
                this.score = data().deepCopy(fields()[2].schema(), other.score);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'firstPlayer' field.
         * Winner player name
         * @return The value.
         */
        public java.lang.CharSequence getFirstPlayer() {
            return firstPlayer;
        }


        /**
         * Sets the value of the 'firstPlayer' field.
         * Winner player name
         * @param value The value of 'firstPlayer'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder setFirstPlayer(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.firstPlayer = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'firstPlayer' field has been set.
         * Winner player name
         * @return True if the 'firstPlayer' field has been set, false otherwise.
         */
        public boolean hasFirstPlayer() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'firstPlayer' field.
         * Winner player name
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder clearFirstPlayer() {
            firstPlayer = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'gameTime' field.
         * Game datetime in UTC
         * @return The value.
         */
        public java.time.Instant getGameTime() {
            return gameTime;
        }


        /**
         * Sets the value of the 'gameTime' field.
         * Game datetime in UTC
         * @param value The value of 'gameTime'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder setGameTime(java.time.Instant value) {
            validate(fields()[1], value);
            this.gameTime = value.truncatedTo(java.time.temporal.ChronoUnit.MICROS);
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'gameTime' field has been set.
         * Game datetime in UTC
         * @return True if the 'gameTime' field has been set, false otherwise.
         */
        public boolean hasGameTime() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'gameTime' field.
         * Game datetime in UTC
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder clearGameTime() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'score' field.
         * Final score
         * @return The value.
         */
        public java.math.BigDecimal getScore() {
            return score;
        }


        /**
         * Sets the value of the 'score' field.
         * Final score
         * @param value The value of 'score'.
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder setScore(java.math.BigDecimal value) {
            validate(fields()[2], value);
            this.score = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'score' field has been set.
         * Final score
         * @return True if the 'score' field has been set, false otherwise.
         */
        public boolean hasScore() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'score' field.
         * Final score
         * @return This builder.
         */
        public ru.leroymerlin.billing.GameResult.Builder clearScore() {
            score = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public GameResult build() {
            try {
                GameResult record = new GameResult();
                record.firstPlayer = fieldSetFlags()[0] ? this.firstPlayer : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.gameTime = fieldSetFlags()[1] ? this.gameTime : (java.time.Instant) defaultValue(fields()[1]);
                record.score = fieldSetFlags()[2] ? this.score : (java.math.BigDecimal) defaultValue(fields()[2]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<GameResult>
            WRITER$ = (org.apache.avro.io.DatumWriter<GameResult>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<GameResult>
            READER$ = (org.apache.avro.io.DatumReader<GameResult>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










